<!DOCTYPE compilationUnit [
<!ELEMENT compliationUnit (packageDeclaration?, importDeclaration*, typeDeclaration*)>

<!----------Declarations------------>

<!ELEMENT packageDeclaration (packageName)> <!--package packageName;-->
<!ELEMENT importDecalaration (singleTypeImportDeclaration | typeImportOnDemandDeclaration)>
<!-- ignore "import static" -->
<!ELEMENT singleTypeImportDeclaration (typeName)> <!-- import typeName -->
<!ELEMENT typeImportOnDemandDeclaration (packageName)> <!-- import packageName.* -->
<!ELEMENT typeDeclaration (classDeclaration | interfaceDeclaration)>
<!ELEMENT classDeclaration (classModifier*, identifier, super?, interfaceType*, classBody)>
<!ELEMENT classModifier (#PCDATA)> <!--public | abstract | final-->
<!ELEMENT super (classType)> <!--extends classType-->
<!ELEMENT classBody (classBodyDeclaration*)>
<!ELEMENT classBodyDeclaration 
	  ( fieldDeclaration 
	  | methodDeclaration 
	  | staticInitializer 
	  | constructorDeclaration)>
<!ATTLIST classBodyDeclaration id ID #REQUIRED> 
<!ELEMENT staticInitializer (block) <!-- static block -->
<!ELEMENT constructorDeclaration (constructorModifier*, constructorDeclarator, throws?, constructorBody)>
<!ELEMENT constructorModifier (#PCDATA)> <!-- public | protected | private -->
<!ELEMENT constructorDeclarator (simpleTypeName, formalParameter*)>
<!ELEMENT formalParameter (tp, variableDeclaratorId)>
<!ELEMENT throws (classType*)> <!-- throws classType,... -->
<!ELEMENT constructorBody (explicitConstructorInvocation?, statement*)>
<!ELEMENT explicitConstructorInvocation (invocationKind, argument*)> <!-- this() | super() -->
<!ELEMENT invocationKind (#PCDATA)> <!--this | super -->
<!ELEMENT fieldDeclaration  (fieldModifier*, tp, variableDeclarator+)>
<!ELEMENT fieldModifier (#PCDATA)> <!-- public | protected | private | static | final | transient | volatile -->
<!ELEMENT variableDeclarator (variableDeclaratorId, variableInitializer?)> <!-- variableDeclaratorId [= variableInitializer]-->
<!ELEMENT variableDeclaratorId (identifier, dims)> <!-- dims denote the dimension fo array. If it is zero, means it's not array variable. -->
<!ELEMENT variableInitializer (expression | arrayInitializer)>
<!ELEMENT methodDeclaration (methodHeader, methodBody)>
<!ELEMENT methodHeader (methodModifier*, resultType, methodDeclarator, throws?)>
<!ELEMENT resultType (tp | voidType)>
<!ELEMENT voidType (#PCDATA)> <!-- void is not in tp -->
<!ELEMENT methodModifier (#PCDATA)> <!-- public | protected | private | static | abstract | final | synchronized | native -->
<!ELEMENT methodDeclarator (identifier, formalParameter*)>
<!ELEMENT methodBody (block?)> <!-- Here if there is no block, there is a ";" instead. -->
<!ELEMENT interfaceDeclaration (interfaceModifier*, identifier, extendsInterfaces?, interfaceBody)>
<!ELEMENT interfaceModifier (#PCDATA)> <!-- public | abstract -->
<!ELEMENT extendsInterfaces (interfaceType+)> <!-- extends interfaceType -->
<!ELEMENT interfaceBody (interfaceMemberDeclaration*)>
<!ELEMENT interfaceMemberDeclaration (constantDeclaration | abstractMethodDeclaration)>
<!ATTLIST interfaceMemberDeclaration id ID #REQUIRED>
<!ELEMENT constantDeclaration (constantModifiers, tp, variableDeclarator)>
<!ELEMENT constantModifiers (#PCDATA)> <!-- public | static | final -->
<!ELEMENT abstractMethodDeclaration (abstractMethodModifier*, resultType, methodMeclarator, throws?)>
<!ELEMENT abstractMethodModifier (#PCDATA)> <!-- public | abstract -->
<!ELEMENT arrayInitializer (variableInitializer*)

<!----------Types---------->

<!ELEMENT tp (primitiveType | referenceType)>
<!ELEMENT primitiveType (#PCDATA)> <!-- boolean | byte | short | int | long | char | float | double -->
<!ATTLIST primitiveType caseNum CDATA #REQUIRED>
<!ELEMENT referenceType (arrayType | classType | interfaceType)>
<!ATTLIST referenceType caseNum CDATA #REQUIRED>
<!ELEMENT classType (typeName)>
<!ATTLIST classType caseNum CDATA #REQUIRED> 
<!ELEEMNT interfaceType (typeName)>
<!ATTLIST interfaceType caseNum CDATA #REQUIRED> 
<!ELEMENT arrayType (tp)> <!-- arrayType has already represent "[]" -->
<!ATTLIST arrayType caseNum CDATA #REQUIRED>

<!----------Blocks and Commands---------->

<!ELEMENT block (statement*)>
<!ELEMENT statement 
	  ( localVariableDeclarationStatement
	  | labeledStatement 
	  | ifStatementt
	  | whileStatement 
	  | forStatement
	  | block
	  | emptyStatement
	  | expressionStatement
	  | switchStatement 
	  | doStatement
	  | breakStatement 
	  | continueStatement
	  | returnStatement 
	  | synchronizedStatement 
	  | throwsStatement 
	  | tryStatement
	  | enhancedForStatement
	  )>
<!ATTLIST statement 
	  marker ID #REQUIRED
	  superEnhancedForStatement IDREF #REQUIRED
	  block CDATA #REQUIRED>
<!ELEMENT localVariableDeclarationStatement (localVariableDeclaration)>
<!ELEMENT localVariableDeclaration (tp, variableDeclarator+)>
<!ELEMENT emptyStatement EMPTY>
<!ELEMENT labeledStatement (identifier, statement)>
<!ELEMENT expressionStatement (statementExpression)> 
<!ELEMENT statementExpression 
	  ( assignment
	  | preincrementExpression 
	  | postincrementExpression
	  | predecrementExpression 
	  | postdecrementExpression 
	  | methodInvocation
	  | classInstanceCreationExpression
	  )>
<!ELEMENT ifStatement (expression, statement, statement?)>
<!ELEMENT switchStatement (expression, switchBlock)>
<!ELEMENT switchBlock (switchBlockStatementGroup*, switchLabel*)>
<!ELEMENT switchBlockStatementBroup (switchLabel+, statement+)>
<!ELEMENT switchLabel (constantExpression)> <!-- If constantExpression is empty or null, it means that no case but default. -->  
<!ELEMENT whileStatement (expression, statement)>
<!ELEMENT doStatement (statement, expression)>
<!ELEMENT forStatement (forInit?, expression?, forUpdate?, statement)>
<!ELEMENT forInit (statementExpression+ | localVariableDeclaration)>
<!ELEMENT forUpdate (statementExpression+)>
<!ELEMENT breakStatement (identifier?)>
<!ELEMENT continueStatement (identifier?)>
<!ELEMENT returnStatement (expression?)>
<!ELEMENT throwsStatement (expression)>
<!ELEMENT synchronizedStatement (expression, block)>
<!ELEMENT tryStatement ((block, catchClause+) | (block, catchClause*, finally))>
<!ELEMENT catchClause (formalParameter, block)>
<!ELEMENT finally (block)>
<!ELEMENT enhancedForStatement (itVariable, itCollection, statement)>
<!ATTLIST enhancedForStatement 
	  id ID #REQUIRED>
<!ELEMENT itVariable (tp, variableDecarator)>
<!ELEMENT itCollection (expression)>

<!----------Expressions---------->

<!ELEMENT constantExpression (expression)>
<!ELEMENT expression (assignmentExpression)>
<!ELEMENT assignmentExpression (conditionalExpression | assignment)>
<!ELEMENT assignment (leftHandSide, assignmentOperator, assignmentExpression)>
<!ELEMENT leftHandSide (expressionName | fieldAccess | arrayAccess)>
<!ELEMENT assignmentOperator (#PCDATA)> <!-- = | *= | /= | %= | += | -= | <<= | >>= | >>>= | &= | ^= | |= -->
<!ELEMENT conditionalExpression (conditionalOrExpression, (expression, conditionalExpression)?)> <!-- conditionalOrExpression ? expression : conditionalExpression -->
<!ELEMENT conditionalOrExpression (conditionalAndExpression+)> <!-- conditionalAndExpression || conditionalAndExpression || ... -->
<!ELEMENT conditionalAndExpression (inclusiveOrExpression+)> <!-- inclusiveOrExpression && inclusiveOrExpression && ... -->
<!ELEMENT inclusiveOrExpression (exclusiveOrExpression+)> <!-- exclusiveOrExpression | exclusiveExpression | ... -->
<!ELEMENT exclusiveOrExpression (andExpression+)> <!-- andExpression ^ andExpression ^ ... -->
<!ELEMENT andExpression (equalityExpression+)> <!-- equalityExpression & equalityExpression & ...-->
<!ELEMENT equalityExpression ((equalityExpression, equalOperator)?, relationalExpression)> <!-- relationalExpression | equlityExpression ==(!=) relationalExpression -->
<!ELEMENT equalOperator (#PCDATA)> <!-- != | == -->
<!ELEMENT relationalExpression 
	  ( shiftExpression 
	  | (relationalExpression, relationOperator, shiftExpression) <!-- e.g. relationalExpression > shiftExpression --> 
	  | (relationalExpression, referenceType) <!-- relationalExpression instanceof referenceType -->
	  )>
<!ELEMENT relationOperator (#PCDATA)> <!-- < | > | >= | <= -->
<!ELEMENT shiftExpression 
	  ( additiveExpression 
	  | (shiftExpression, shiftOperator, additiveExpression)
	  )>
<!ELEMENT shiftOperator (#PCDATA) <!-- << | >> | >>> -->
<!ELEMENT additiveExpression 
	  ( multiplicativeExpression 
	  | (additiveExpression, additiveOperator, multiplicativeExpression)
	  )>
<!ELEMENT additiveOperator (#PCDATA) <!-- + | - -->
<!ELEMENT multiplicativeExpression 
	  ( unaryExpression 
	  | (multiplicativeExpression, multiOperator, unaryExpression)
	  )>
<!ELEMENT multiOperator (#PCDATA) <!-- * | / | % -->
<!ELEMENT castExpression 
	  ( (primitiveType, unaryExpression) 
	  | (referenceType, unaryExpressionNotPlusMinus)
	  )>
<!ELEMENT unaryExpression (preincrementExpression | predecrementExpression | (additiveOperator, unaryExpression) | unaryExpressionNotPlusMinus)>
<!ELEMENT predecrementExpression (unaryExpression)>
<!ELEMENT preincrementExpression (unaryExpression)>
<!ELEMENT unaryExpressionNotPlusMinus (postfixExpression | (unaryOperator, unaryExpression) | castExpression)>
<!ELEMENT unaryOperator (#PCDATA)> <!-- ~ | ! -->
<!ELEMENT postdecrementExpression (postfixExpression)> 
<!ELEMENT postincrementExpression (postfixExpression)> 
<!ELEMENT postfixExpression 
	  ( primary 
	  | expressionName 
	  | postincrementExpression 
	  | postdecrementExpression
	  )>
<!ELEMENT methodInvocation 
	  ( (methodName, argument*) 
	  | (primary, identifier, argument*)
	  )>
<!ELEMENT fieldAccess (primary, identifier)>
<!ELEMENT primary (primaryNoNewArray | ArrayCreationExpression)>
<!ELEMENT primaryNoNewArray 
	  ( literal 
	  | this <!-- this -->
	  | super <!-- added by myself -->
	  | parExpression <!-- parathized --> 
	  | classInstanceCreationExpression
	  | interfaceInstanceCreationExpression
	  | fieldAccess 
	  | methodInvocation 
	  | arrayAccess
	  )>
<!ELEMENT this EMPTY>
<!ELEMENT super EMPTY>
<!ELEMENT parExpression (expression)>
<!ELEMENT classInstanceCreationExpression (classType, argument*)>
<!ELEMENT interfaceInstanceCreateionExpressionn (interfaceType, argument*, calssBody)<!-- Add by myself -->
<!ELEMENT argument (expression)>
<!ELEMENT arrayCreationExpression ((primitiveType | classOrInterfaceType), dimExpr+, dims)>
<!ELEMENT dimExpr (expression)> <!-- [expression] -->
<!ELEMENT dims (#PCDATA) <!--  [ ] | <dims> [ ]. It keeps the number of []. -->
<!ELEMENT arrayAccess 
	  ( (expressionName, dimExpr)
	  | (primaryNoNewArray, dimExpr)
	  )>

<!----------Tokens---------->

<!ELEMENT packageName (identifier+)>
<!ELEMENT typeName (packageName?, identifier)>
<!ELEMENT simpleTypeName (identifier)>
<!ELEMENT expressionName (ambiguousName?, identifier)>
<!ELEMENT methodName (ambiguousName?, identifier)>
<!ELEMENT ambiguousName (ambiguousName?, identifier)>
<!ELEMENT literal (#PCDATA)>
<!ELEMENT identifier (#PCDATA)>
]>
